/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package GUI;

import backEnd.*;
import java.awt.HeadlessException;
import javax.swing.JOptionPane;

/**
 *
 * @author Diego Jacobs 13160
 */
public class adminJuguetes extends javax.swing.JFrame {
    private AdministradorJuguetes admin = new AdministradorJuguetes();
    private AdministradorProveedores adminP = new AdministradorProveedores(); 
    private Usuario actual; 
    /**
     * Creates new form adminJuguetes
     */
    public adminJuguetes() {
        initComponents();
        showJuguetes(); 
    }
    
    public adminJuguetes(Usuario user) {
        initComponents();
        showJuguetes(); 
        this.setActual(user);
    }

    public Usuario getActual() {
        return actual;
    }

    public void setActual(Usuario actual) {
        this.actual = actual;
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosed(java.awt.event.WindowEvent evt) {
                formWindowClosed(evt);
            }
        });

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        jButton1.setText("Nuevo");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Modificar");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText("Eliminar");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 840, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton2)
                    .addComponent(jButton1)
                    .addComponent(jButton3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 339, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        int codigoJ = admin.generarNuevoCodigo(); 
        int codigoP = codigoProovedor(); 
        String marca = JOptionPane.showInputDialog(this, "Marca del nuevo Juguete:");
        int edad = edadJuguete("");
        String tipo = tipoJuguete(); 
        int complejidad = 2; 
        if (tipo == "Mecanico") { 
            complejidad = complejidadJuguete(); 
        }
        float valU = valorJuguete("unitario","");
        float valA = valorJuguete("adicional",""); 
        int cant = cantidadJuguete("");
        
        Juguete temp = new Juguete(codigoJ,codigoP,marca,edad,tipo,complejidad,valU,valA,cant);
        String msj = "Desea ingresar el juguete con las siguientes especificaciones?\nCodigo: "+temp.getCodigo()+"\nProveedor: "+temp.getCodProveedor()+"\nMarca: "+temp.getMarca()+"\nEdad: "+temp.getEdad()+"\nTipo: "+temp.getTipo()+"\nComplejidad: "+temp.getComplejidad()+"**\nValor Unitario: "+temp.getValorUnitario()+"\nValor Adicional: "+temp.getValorAdicional()+"\nValor Real: "+temp.getValorReal()+"\nCantidad: "+temp.getCantidad()+"\n**Nota: Todos los juguetes electronicos tienen\ncomplejidad 2."; 
        int opc = JOptionPane.showConfirmDialog(this, msj); 
        if (opc == 0) {
            admin.insertar(temp);
            adminP.nuevoJuguete(codigoP,1);
            showJuguetes();
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        int row = jTable1.getSelectedRow();
        if (row>(-1)) {
            Juguete temp = retrieve(row); 
            admin.eliminar(temp);
            adminP.nuevoJuguete(temp.getCodigo(),-1);
            showJuguetes(); 
        }
    }//GEN-LAST:event_jButton3ActionPerformed
    //ingresar juguetes
    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        int row = jTable1.getSelectedRow(); 
        if (row > -1){
            Juguete temp = retrieve(row); 
            temp.setValorUnitario(valorJuguete("unitario",String.valueOf(temp.getValorUnitario())));
            temp.setValorAdicional(valorJuguete("adicional",String.valueOf(temp.getValorAdicional())));
            temp.setValorReal();
            String msj = "Desea ingresar el juguete con las siguientes especificaciones?\nCodigo: "+temp.getCodigo()+"\nProveedor: "+temp.getCodProveedor()+"\nMarca: "+temp.getMarca()+"\nEdad: "+temp.getEdad()+"\nTipo: "+temp.getTipo()+"\nComplejidad: "+temp.getComplejidad()+"**\nValor Unitario: "+temp.getValorUnitario()+"\nValor Adicional: "+temp.getValorAdicional()+"\nValor Real: "+temp.getValorReal()+"\nCantidad: "+temp.getCantidad()+"\n**Nota: Todos los juguetes electronicos tienen\ncomplejidad 2."; 
            int opc = JOptionPane.showConfirmDialog(this, msj); 
            if (opc == 0) {
                admin.modificar(temp);
                showJuguetes();
            }
        } 
    }//GEN-LAST:event_jButton2ActionPerformed

    private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed
        // TODO add your handling code here:
        menuInicio mi = new menuInicio(this.getActual()); 
        mi.setVisible(true);
    }//GEN-LAST:event_formWindowClosed
    
    private Juguete retrieve(int row) {
        String cJ = String.valueOf(jTable1.getValueAt(row, 0));
        int codigoJ = Integer.parseInt(cJ); 
        String cP = String.valueOf(jTable1.getValueAt(row, 1));
        int codigoP = Integer.parseInt(cP);
        String marca = (String) jTable1.getValueAt(row, 2);
        String age = String.valueOf(jTable1.getValueAt(row, 3));
        int edad = Integer.parseInt(age);
        String tipo = (String) jTable1.getValueAt(row, 4); 
        String comp = String.valueOf(jTable1.getValueAt(row, 5));
        int complejidad = Integer.parseInt(comp); 
        String vU = String.valueOf(jTable1.getValueAt(row, 6));
        float valU = Float.parseFloat(vU);
        String vA = String.valueOf(jTable1.getValueAt(row, 7));
        float valA = Float.parseFloat(vA); 
        String qant = String.valueOf(jTable1.getValueAt(row, 9));
        int cant = Integer.parseInt(qant);
        Juguete temp = new Juguete(codigoJ,codigoP,marca,edad,tipo,complejidad,valU,valA,cant);
        return temp; 
    }

    private int codigoProovedor() {
        Proveedor[] list = adminP.getListado(); 
        String[] nombres = new String[list.length]; 
        for (int i=0; i<list.length; i++) {
            nombres[i] = list[i].getNombre(); 
        }
        //FIN PRUEBA
        String prov = "";
        prov = (String) JOptionPane.showInputDialog(this, "Proveedor:", "", JOptionPane.QUESTION_MESSAGE,null,nombres,nombres[0]);
        int codigo = adminP.getCodigo(prov);
        return codigo;
    }
    
    private int edadJuguete(String edad) {
        boolean flag = false; 
        int age = 0; 
        while (!(flag)) {
            try {
                age = Integer.parseInt(JOptionPane.showInputDialog(this, "Edad requerida para jugar con este juguete:", edad));
                flag = true; 
            } catch (Exception e) {
                JOptionPane.showMessageDialog(this,"Edad Invalida, debe ser un numero entero. (4,16,43)"); 
            }
        }
        return age; 
    }
    private String tipoJuguete() {
        String type = "";
        String[] tipos = new String[] {"Mecanico","Electronico"}; 
        type = (String) JOptionPane.showInputDialog(this, "Tipo de juguete: (MECANICO/ELECTRONICO)", "Tipo de Juguete", JOptionPane.QUESTION_MESSAGE,null,tipos,tipos[0]);
        return type; 
    }
    private int complejidadJuguete() {
        int cj = 0; 
        String[] tipos = new String[] {"1","2","3"};
        String compl = (String) JOptionPane.showInputDialog(this, "Complejidad del juguete: (1/2/3)", "Tipo de Juguete", JOptionPane.QUESTION_MESSAGE,null,tipos,tipos[0]);
        cj = Integer.parseInt(compl); 
        return cj; 
    }
    private float valorJuguete(String tip,String vD) {
        float valor = 0;
        boolean flag = false; 
        while (!(flag)) {
            try {
                valor = Float.parseFloat(JOptionPane.showInputDialog(this, "Valor "+tip+" del Juguete:", vD));
                flag = true; 
            } catch (HeadlessException | NumberFormatException e) {
                JOptionPane.showMessageDialog(this, "Valor "+tip+" Invalido");
            }
        }
        return valor; 
    }
    
    private int cantidadJuguete(String cD){
        int cant = 0;
        boolean flag = false; 
        while (!(flag)){
            try {
                cant = Integer.parseInt(JOptionPane.showInputDialog(this, "Cantidad de juguetes:",cD));
                flag = true; 
            } catch (Exception e) {
                JOptionPane.showMessageDialog(this, "Cantidad de juguetes invalida!");
            }
        }
        return cant; 
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(adminJuguetes.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(adminJuguetes.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(adminJuguetes.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(adminJuguetes.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new adminJuguetes().setVisible(true);
            }
        });
    }
    public void showJuguetes() {
        Juguete[] listado = admin.getListado();
        listado = admin.sort(listado); 
        int lim = listado.length; 
        Object[][] data = new Object[lim][10];
        for (int i = 0; i<lim; i++) {
            data[i][0] = listado[i].getCodigo();
            data[i][1] = listado[i].getCodProveedor(); 
            data[i][2] = listado[i].getMarca();
            data[i][3] = listado[i].getEdad(); 
            data[i][4] = listado[i].getTipo();
            data[i][5] = listado[i].getComplejidad(); 
            data[i][6] = listado[i].getValorUnitario(); 
            data[i][7] = listado[i].getValorAdicional(); 
            data[i][8] = listado[i].getValorReal(); 
            data[i][9] = listado[i].getCantidad(); 
            
        }
        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            data,
            new String [] {
                "Codigo", "Proovedor", "Marca", "Edad", "Tipo", "Complejidad", "Valor Uni.", "Valor Ad.","Valor real", "Cantidad"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false,false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables
}
